import asyncio
import logging

from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.enums.chat_member_status import ChatMemberStatus
from aiogram.filters import Command
from aiogram.filters import Text
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    CallbackQuery
)

API_TOKEN = "8138203975:AAE-q7SaDll1TOuFfB-inw3VsEjSowFlASM"
ADMIN_ID = 5410641725

# –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
CHANNELS = [
    "https://t.me/fisanor_market",
    "https://t.me/FISANOR_market_homeaccs",
    "https://t.me/FISANOR_marketplace_official"
]

CHANNEL_USERNAMES = [
    "fisanor_market",
    "FISANOR_market_homeaccs",
    "FISANOR_marketplace_official"
]

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º router
dp.include_router(router)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üì¶ –ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞"), KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
        [KeyboardButton(text="üì£ –ö–∞–Ω–∞–ª—ã")]
    ],
    resize_keyboard=True
)

catalog_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", callback_data="cat_electronics"),
            InlineKeyboardButton(text="–ö–æ—Å–º–µ—Ç–∏–∫–∞", callback_data="cat_cosmetics")
        ],
        [
            InlineKeyboardButton(text="–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞", callback_data="cat_home")
        ]
    ]
)

# –ü—Ä–æ–¥—É–∫—Ç—ã
products = {
    "cat_electronics": [
        {
            "name": "–ü–∏—Å—Ç–æ–ª–µ—Ç –º–∞—Å—Å–∞–∂—ë—Ä",
            "price": 105000,
            "photo": "https://i.imgur.com/sRPfAmq.jpeg"
        },
        {
            "name": "–ì–µ–π–º–µ—Ä—Å–∫–∏–π –≥–æ–ª–æ–≤–Ω–æ–π –ø—Ä–æ–≤–æ–¥–Ω–æ–π –Ω–∞—É—à–Ω–∏–∫–∏ —Å RGB –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π",
            "price": 150000,
            "photo": "https://i.imgur.com/kP2j2NU.jpeg"  # –ø—Ä–∏–º–µ—Ä, –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å
        }
    ],
    "cat_cosmetics": [
        {"name": "–ú–∞—Å–∫–∞ –¥–ª—è –ª–∏—Ü–∞", "price": 35000},
        {"name": "–ú–∏—Ü–µ–ª–ª—è—Ä–Ω–∞—è –≤–æ–¥–∞", "price": 25000}
    ],
    "cat_home": [
        {"name": "–ö–æ–º–æ–¥", "price": 4850000},
        {"name": "–≠—Ç–∞–∂–µ—Ä–∫–∞ –¥–ª—è –∫—É—Ö–Ω–∏", "price": 175000}
    ]
}

user_cart = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscriptions(user_id):
    for channel in CHANNEL_USERNAMES:
        chat_member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
        if chat_member.status not in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            return False
    return True

# /start
@router.message(F.text == "/start")
async def start_cmd(message: Message):
    user_cart[message.from_user.id] = []
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FISANOR-market! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

# –ö–∞—Ç–∞–ª–æ–≥
@router.message(F.text.contains(["–ö–∞—Ç–∞–ª–æ–≥", "üõç –ö–∞—Ç–∞–ª–æ–≥"]))
async def show_catalog(message: Message):
    if not await check_subscriptions(message.from_user.id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω—É!\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üì£ –ö–∞–Ω–∞–ª—ã\" –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=catalog_kb)

# –ö–Ω–æ–ø–∫–∞ "–ö–∞–Ω–∞–ª—ã"
@router.message(F.text == "üì£ –ö–∞–Ω–∞–ª—ã")
async def show_channels(message: Message):
    text = "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω—É:\n\n"
    for url in CHANNELS:
        text += f"üëâ {url}\n"
    await message.answer(text)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
@router.callback_query(F.data.startswith("cat_"))
async def show_products(callback: CallbackQuery):
    category = callback.data
    items = products.get(category, [])

    for item in items:
        button = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{item['name']}")]
            ]
        )

        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä ‚Äî –ø–∏—Å—Ç–æ–ª–µ—Ç –º–∞—Å—Å–∞–∂—ë—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
        if item["name"] == "–ü–∏—Å—Ç–æ–ª–µ—Ç –º–∞—Å—Å–∞–∂—ë—Ä":
            photo_url = "https://cdn.openai.com/chat-assets/user-uploads/file_00000000eecac86e45a5d6a6c36ddc1a.png"
            await callback.message.answer_photo(
                photo=photo_url,
                caption=f"üõí {item['name']}\nüíµ –¶–µ–Ω–∞: {item['price']} —Å—É–º",
                reply_markup=button
            )
        else:
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã ‚Äî —Ç–µ–∫—Å—Ç–æ–º
            await callback.message.answer(
                f"üõí {item['name']}\nüíµ –¶–µ–Ω–∞: {item['price']} —Å—É–º",
                reply_markup=button
            )

    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
@router.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: CallbackQuery):
    item_name = callback.data[4:]
    user_id = callback.from_user.id
    user_cart.setdefault(user_id, []).append(item_name)
    await callback.answer(f"–¢–æ–≤–∞—Ä '{item_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

# –ö–æ—Ä–∑–∏–Ω–∞
@router.message(F.text == "üì¶ –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    items = user_cart.get(message.from_user.id, [])
    if not items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    cart_text = "\n".join(f"- {item}" for item in items)
    cart_text += "\n\n–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –∏ –∏–º—è."
    await message.answer(cart_text)

# –û–ø–ª–∞—Ç–∞
@router.message(F.text == "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞")
async def delivery_info(message: Message):
    await message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –¥–æ –¥–æ–º–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ –ø–æ –∞–¥—Ä–µ—Å—É: https://maps.app.goo.gl/V3MN6X1xiSPTSVEi6\n"
        "\nüí≥ –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É: 4023 0605 0832 1527 (Abduxakimov Xasan Botiro'vich)\n\n"
        "‚è± –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: 14‚Äì25 –¥–Ω–µ–π\nüí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑: 140 000 —Å—É–º"
    )

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@router.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_info(message: Message):
    await message.answer(
        "–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n"
        "@fisanor_admin (‰∫ó.‰πÇ.‰∏´.Âåö.ÂÖ´.|‚Äì|.‰∫ó)\n@fisanor (Xasan) ‚Äî 24/7 –Ω–∞ —Å–≤—è–∑–∏"
    )

# –ó–∞–∫–∞–∑
@router.message()
async def handle_order(message: Message):
    items = user_cart.get(message.from_user.id, [])
    if items:
        if not await check_subscriptions(message.from_user.id):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ù–∞–∂–º–∏—Ç–µ \"üì£ –ö–∞–Ω–∞–ª—ã\" –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å.")
            return

        order_text = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{message.from_user.username or '–±–µ–∑ –Ω–∏–∫–∞'} (ID: {message.from_user.id}):\n"
        order_text += "\n".join(f"- {item}" for item in items)
        order_text += f"\n\nüìç –ê–¥—Ä–µ—Å: {message.text}"

        await bot.send_message(ADMIN_ID, order_text)
        await message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        user_cart[message.from_user.id] = []
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.")

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

class PingHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'Bot is running!')

def run_ping_server():
    server = HTTPServer(('0.0.0.0', 10000), PingHandler)
    server.serve_forever()

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_ping_server).start()

if __name__ == "__main__":
    asyncio.run(main())